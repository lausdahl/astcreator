// this file is automatically generated by treegen. do not modify!

package org.overture.tools.treegen.ast.imp;

// import the abstract tree interfaces
import org.overture.tools.treegen.ast.itf.*;

// import java collection types
import java.util.*;

@SuppressWarnings("unchecked")
public class TreeGenAstCompositeDefinition extends TreeGenAstDefinitions implements ITreeGenAstCompositeDefinition
{
	// default version identifier for serialize
	public static final long serialVersionUID = 1L;

	// private member variable (composite_name)
	private String m_composite_name = new String();

	// public operation to retrieve the embedded private field value
	public String getCompositeName()
	{
		return m_composite_name;
	}

	// public operation to set the embedded private field value
	public void setCompositeName(String p_composite_name)
	{
		// consistency check (field must be non null!)
		assert(p_composite_name != null);

		// instantiate the member variable
		m_composite_name = p_composite_name;
	}

	// private member variable (fields)
	private List m_fields = new Vector<ITreeGenAstCompositeField>();

	// public operation to retrieve the embedded private field value
	public List<ITreeGenAstCompositeField> getFields()
	{
		return m_fields;
	}

	// public operation to set the embedded private field value
	public void setFields(List<? extends ITreeGenAstCompositeField> p_fields)
	{
		// consistency check (field must be non null!)
		assert(p_fields != null);

		// instantiate the member variable
		m_fields = p_fields;

		// set the parent of each element in the sequence parameter passed
		for (ITreeGenAstNode lnode: p_fields) lnode.setParent(this);
	}

	// public operation to add an element to the collection
	public void addFields(ITreeGenAstCompositeField p_fields)
	{
		// consistency check
		assert(p_fields != null);

		// add element to collection and set parent pointer (if applicable)
		m_fields.add(p_fields);
		p_fields.setParent(this);
	}

	// default constructor
	public TreeGenAstCompositeDefinition() { super(); }

	// auxiliary constructor
	public TreeGenAstCompositeDefinition(
		String p_composite_name,
		List<? extends ITreeGenAstCompositeField> p_fields
	) {
		super();
		setCompositeName(p_composite_name);
		setFields(p_fields);
	}

	// visitor support
	public void accept(ITreeGenAstVisitor pVisitor) { pVisitor.visitCompositeDefinition(this); }

	// the identity function
	public String identify() { return "TreeGenAstCompositeDefinition"; }

	// the toString function
	public String toString()
	{
		StringBuffer buf = new StringBuffer();
		buf.append("new "+identify()+"(");
		buf.append(convertToString(getCompositeName()));
		buf.append(",");
		buf.append(convertToString(getFields()));
		buf.append(")");
		return buf.toString();
	}
}
