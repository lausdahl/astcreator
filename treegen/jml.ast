--
-- JML ABSTRACT SYNTAX DEFINITION
--

class Oml

values 
	package = "org.overturetool.jml.ast";
	javadir = "d:\\workspace\\test\\src";
	toplevel = "Specifications"

instance variables 
	remark : java := "String"

types

Specifications ::
	class_list : seq of WrappedJmlClass
	;

WrappedJmlClass ::
	package : seq of char
	refine : seq of char
	imports_java : seq of Import
	imports_jml : seq of ModelImport
	class_val : Class
	;

Import ::
	import : seq of char
	;

ModelImport ::
	model : bool
	import : seq of char
	;

Class ::
  access : AccessDefinition
  kind : ClassKind
  identifier : Identifier
  inheritance_clause : [ClassInheritanceClause]
  interface_inheritance : [InterfaceInheritanceClause]
  class_body : seq of DefinitionBlock
  ;

ClassKind =
	<CLASS> | <ABSTRACT> | <INTERFACE>
	;

InterfaceInheritanceClause ::
	identifier_list : seq of Identifier
	;

ClassInheritanceClause ::
	identifier_list : Identifier
	;

AccessDefinition :: 
	scope  : Scope
	;
  
Scope =
  <PUBLIC> | 
  <PRIVATE> | 
  <PROTECTED> | 
  <DEFAULT>
  ;

DefinitionBlock =
	InstanceVariableDefinitions |
	ValueDefinitions |
	InvariantDefinitions |
	OperationDefinitions
	;

----
---- INSTANCE VARIABLE DEFINITIONS
----

-- MISSING IN (in-group-clause), ETC
-- 

InstanceVariableDefinitions :: 
	jml_variables : seq of Variable
	java_variables : seq of Variable
	;

Variable ::
	access : AccessDefinition
	model : bool
	statickeyword : bool
	final : bool
	type : Type
	identifier : Identifier
	expression : Expression
	represents : [RepresentsClause]
	;

RepresentsClause ::
	redundant  : bool
	reference  : seq of StoreExpression
	expression : Expression
	;
	
StoreExpression ::
	prefix : StorePrefix
	suffix : StoreSuffix
	;
	
StorePrefix =
	NameId |
	ThisKeyword |
	SuperKeyword
	;
	
StoreSuffix =
	NameId |
	ThisKeyword |
	StarKeyword |
	SpecArrayExpression
	;
	
SpecArrayExpression =
	Expression |
	StarKeyword |
	RangeExpression
	;
	
RangeExpression ::
	first : Expression
	last : Expression
	;

MapsIntoClause ::
	redundant : bool
	field : MemberField
	group_list : GroupList
	;

MemberField =
	NonArrayField |
	ArrayField
	;
	
NonArrayField ::
	identifier : Identifier
	member : MapsMemberField
	;
	
MapsMemberField =
	MapsMemberFieldName |
	StarKeyword
	;

MapsMemberFieldName ::
    name : Identifier;

ArrayField ::
	maps_array : MapsArrayField
	member : [MapsMemberField]
	;
	
MapsArrayField ::
	identifier : Identifier
	list : seq of SpecArrayExpression
	;

GroupList ::
	list : seq of GroupName
	;
	
GroupName ::
	prefix : GroupNamePrefix
	identifier : Identifier
	;
	
GroupNamePrefix = 
	<SUPER> |
	<THIS>
	;

----
---- VALUE DEFINITIONS
----

ValueDefinitions ::
	identifier : Identifier
	expression : Expression
	;

----
---- INVARIANT DEFINITIONS
----

-- not yet specified
InvariantDefinitions :: 
	invariant_list : seq of InvariantDefinition;

InvariantDefinition ::
	access : AccessDefinition
	redundant : bool
	predicate : Expression
	;

----
---- OPERATION DEFINITIONS
----

OperationDefinitions ::
	operation_list : seq of OperationDefinition
	;
	
OperationDefinition :: 
	trailer : [MethodSpecifications]
	access : AccessDefinition
	pure : bool
	statickeyword : bool
	final : bool
	returning_type : Type
	identifier : Identifier
	parameter_list : seq of Parameter
	body : [Body]
	;

MethodSpecifications ::
	specs : Specs
	also  : Specs
	;
	
Specs ::
	list : seq of OperationTrailer
	;

OperationTrailer =
	LightweightSpecification |
	HeavyweightSpecification
	;

LightweightSpecification ::
	trailers : seq of Trailers
	;

HeavyweightSpecification =
	BehaviourSpec |
	ExceptionalSpec |
	NormalSpec
	;

BehaviourSpec ::
	privacy : Scope
	list : seq of Trailers
	;

ExceptionalSpec :: 
	privacy : Scope
	list : seq of Trailers
	;
	
NormalSpec :: 
	privacy : Scope
	list : seq of Trailers
	;
	
Trailers =
	EnsuresClause |
	AssignableClause | 
	SignalsClause |
	SignalsOnlyClause | 
	RequiresClause
	;
	
EnsuresClause ::
	ensures_expression : Expression
	;
	
RequiresClause ::
	requires_expression : Expression
	;
	
AssignableClause ::
	assignable_list : seq of Identifier
	;
	
SignalsClause ::
	exception : Exception
	predicate : Expression
	;

SignalsOnlyClause ::
	reference_types : seq of ReferenceType
	;
	
ReferenceType = 
	Identifier 
	;

Exception ::
	type : ExceptionType
	identifier : Identifier
	;

Body :: 
	body : seq of char
	;

Parameter :: 
	type : Type
	identifier : Identifier
	;
	
--------
-- TYPES
--------

Type =
	CharType |
	BoolType |
	EnumerationType | 
	IntegerType |
	FloatType |
	MapValueToValueType | 
	SetValueType |
	SeqValueType |
	ObjectType |
	VoidType
	;

CharType :: ;

BoolType :: ;

IntegerType :: ;

EnumerationType ::
	enum_literal : EnumLiteral;

FloatType :: ;

MapValueToValueType ::
	dom_type : Type
	rng_type : Type;

SetValueType ::
	type : Type;

SeqValueType ::
	type : Type;

ObjectType :: ;

ExceptionType ::
    type : Identifier;

VoidType :: ;

--------------
-- EXPRESSIONS
--------------

Expression = BracketedExpression |
             IfExpression |
			 UnaryExpression |
			 BinaryExpression |
			 ForAllExpression |
			 ExistsExpression |
			 OldName |
			 NewExpression |
			 Name |
			 PostfixExpression |
			 SetComprehention
			 ;

BracketedExpression ::
	expression : Expression
	;
	
IfExpression ::
	if_expression : Expression
	then_expression : Expression
	else_expression : Expression
	;
	
UnaryExpression ::
	operator : UnaryOperator
	expression : Expression
	;

UnaryOperator = 
	<NOT> |
	<OLD> |
	<ABS> |
	<FLOOR> |
	<LSHIFT> |           -- <<
	<RSHIFT> |           -- >>
	<URSHIFT> |          -- >>>
	<BITEXCLUSIVEOR> |   -- ^
	<BITINCLUSIVEOR> |   -- |
	<BITAND>  |           -- &
	Type                 -- cast
	;

BinaryExpression :: 
	lhs_expression : Expression
	operator : BinaryOperator
	rhs_expression : Expression
	;

BinaryOperator = 
	<MINUS> |
	<PLUS> |
	<MULTIPLY> |
	<DIVIDE> |
	<REMAIN> |
	<LE> |
	<L> |
	<G> |
	<GE> |
	<EQ> |
	<NE> |
	<INSTANCEOF> |
	<LAND> |             -- &&
	<LOR> |              -- ||
	<BITEXCLUSIVEOR> |   -- ^
	<BITINCLUSIVEOR> |   -- |
	<BITAND> |           -- &
	<LSHIFT> |           -- <<
	<RSHIFT> |           -- >>
	<URSHIFT> |          -- >>>
	<IMPLY> |
	<IMPLYBACK> |
	<EQUIV> |
	<NOTEQUIV> |
	<MULEQ> |
	<DIVEQ> |
	<REMEQ> |
	<PLUSEQ> |
	<MINUSEQ> |
	<SUBTYPE>            -- <:
	;

ForAllExpression ::
	bind_list : QuantifierDeclaration
	expression : seq of Expression
	;
	
ExistsExpression ::
	bind_list : QuantifierDeclaration
	expression : seq of Expression
	;
	
QuantifierDeclaration ::
	bound : [BoundModifiers]
	type : Type
	vars : seq of Identifier
	;
	
BoundModifiers =
	<NON_NULL> |
	<NULLABLE>;
	
OldName ::
	identifier : Identifier
	;
	
NewExpression ::
	type : Type
	expression_list : seq of Expression
	;
	
Name ::
	class_identifier : [Identifier]
	identifier : Identifier
	;
	
-- not yet specified
PostfixExpression :: 
	primary : seq of PrimaryExpressions
	operation : PostfixOperation	
	;

PostfixOperation =
	<INCREMENT> |
	<DECREMENT>
	;

PrimaryExpressions ::
	primary : PrimaryExpression
	suffix : [PrimarySuffix]
	;

SuperKeyword :: ;
ThisKeyword :: ;
NullKeyword :: ;
TrueKeyword :: ;
FalseKeyword :: ;
ResultKeyword :: ;
OldKeyword :: ;
NotAssignedKeyword :: ;
StarKeyword :: ;
ClassKeyword :: ;

PrimarySuffix =
	ThisKeyword |
	ClassKeyword |
	SuperKeyword |
	NewExpression |
	ExpressionsList |
	Expression
	;

ExpressionsList ::
    list : seq of Expression
	       ;

PrimaryExpression =
	NameId |
	SuperKeyword |
	ThisKeyword | 
	NullKeyword |
	TrueKeyword |
	FalseKeyword |
	Literal |
	ResultKeyword |
	OldKeyword |
	NotAssignedKeyword
	;

NameId ::
    name : Identifier
	;

PrimaryKeyword =
	ResultKeyword |
	OldKeyword |
	NotAssignedKeyword
	;

SetComprehention ::
	bound : [BoundModifiers]
	type : Type
	quantified_vars : Identifier
	predicate : SetComprehensionPredicate
	;

SetComprehensionPredicate ::
	postfix : PostfixExpression
	identifier : Identifier
	predicate : Expression
	;


---
--- LEXICAL ELEMENTS
---

Literal =
	NumericalLiteral |
	FloatLiteral |
	EnumLiteral |
	BooleanLiteral |
	CharacterLiteral |
	StringLiteral |
	NullLiteral;
	
EnumLiteral	::
	val : seq of char;
	
NumericalLiteral ::
	val : nat;
	
FloatLiteral ::
	val : real;
	
BooleanLiteral ::
	val : bool;
	
CharacterLiteral ::
	val : char;
	
StringLiteral ::
	val : seq of char;
	
NullLiteral :: ;

Identifier = seq of char


end Oml
